Figure out how the program counter should be changed [DONE]
- the program counter is incremented by the amount of bytes an instruction takes
- if ld_n_nn = 3 bytes then we will pc += 3, etc..

Implement LD instructions [DONE] (are they fully correct?)


Mon 14th Apr:
- Implement INC and DEC instructions [DONE]
- Change switch cases to Java 12's switch expression (more concise) [DONE]
- Change register if else's to switch expressions [DONE]

So far LD's and INC/DEC are implemented. Next we'll do ADD instruction

Tue 15th Apr:
- Implement the 21 opcodes for ADD instruction [DONE]
- Refactor this code (reduce the flag checks to 1 method) [DONE]


Thu 17th Apr:
We still have a lot of repeated code. Especially where we essentially do the same thing but access
a different register. Reducing this to a for loop (from a to l) would reduce our code by prob 20-30%,
but then our accesses become iterative instead of instant...
- above is done...

Note to remember!:
In java, we can't represent unsigned nums. In our project, our registers don't actually have a limit and
don't actually overflow! So when we set the flags, our values don't actually cycle back to 0. So for our 8bit reg
going over xFF just puts it at x100. We set the C flag, but the value stays at 0x100. We NEED to actually be resetting
our values.

reset our register values on overflows [DONE]
implement the 9 opcodes for ADC instruction [DONE]
implement the 9 opcodes for SUB instruction [DONE]
implement the 9 opcodes for SBC instruction [DONE]


Also, for the DEC, sub methods, we don't really handle what we do if our registers go below 0?

Fri 18th Apr:
- implement AND instructions [DONE]
- implement XOR instructions [DONE]
- implement OR instructions [DONE]
- implement CP instructions [DONE]

- implement PUSH/POP r16 [DONE]
- implement JP instructions [DONE]
- implement JR isntructions [DONE]

- implement RET instructions [DONE]

Sat 19th Apr:
- implement CALL instructions [DONE]
- implement RST instructions [DONE]
- implement rotation aReg instructions (rla, rlca, etc..) [DONE]