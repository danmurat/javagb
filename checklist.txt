Figure out how the program counter should be changed [DONE]
- the program counter is incremented by the amount of bytes an instruction takes
- if ld_n_nn = 3 bytes then we will pc += 3, etc..

Implement LD instructions [DONE] (are they fully correct?)


Mon 14th Apr:
- Implement INC and DEC instructions [DONE]
- Change switch cases to Java 12's switch expression (more concise) [DONE]
- Change register if else's to switch expressions [DONE]

So far LD's and INC/DEC are implemented. Next we'll do ADD instruction

Tue 15th Apr:
- Implement the 21 opcodes for ADD instruction [DONE]
- Refactor this code (reduce the flag checks to 1 method) [DONE]


Thu 17th Apr:
We still have a lot of repeated code. Especially where we essentially do the same thing but access
a different register. Reducing this to a for loop (from a to l) would reduce our code by prob 20-30%,
but then our accesses become iterative instead of instant...
- above is done...

Note to remember!:
In java, we can't represent unsigned nums. In our project, our registers don't actually have a limit and
don't actually overflow! So when we set the flags, our values don't actually cycle back to 0. So for our 8bit reg
going over xFF just puts it at x100. We set the C flag, but the value stays at 0x100. We NEED to actually be resetting
our values.

reset our register values on overflows [DONE]
implement the 9 opcodes for ADC instruction [DONE]
implement the 9 opcodes for SUB instruction [DONE]
implement the 9 opcodes for SBC instruction [DONE]


Also, for the DEC, sub methods, we don't really handle what we do if our registers go below 0?

Fri 18th Apr:
- implement AND instructions [DONE]
- implement XOR instructions [DONE]
- implement OR instructions [DONE]
- implement CP instructions [DONE]

- implement PUSH/POP r16 [DONE]
- implement JP instructions [DONE]
- implement JR isntructions [DONE]

- implement RET instructions [DONE]

Sat 19th Apr:
- implement CALL instructions [DONE]
- implement RST instructions [DONE]
- implement rotation aReg instructions (rla, rlca, etc..) [DONE]

Sun 20th Apr:
- figure out what the interrupts do [DONE]
- implement the interrupt instructions (halt, di, ei, + reti) [DONE]


Tue 10th Jun:
- fixed JR instruction (should work as intended, but not 100% sure).

Wed 11th Jun:
- check out HALT issue from thoughts.txt (been unable to find what the issue was so far..)
- handle all the overflow/underflow and flag issues [DONE]
- check why z flag not being appropriately set [DONE]

3 main issues solved today:
1. handling overflow and underflow and setting their appropriate flags
    A lot of our errors simply came from not wrapping our register values around when they under/overflow
    (0xFF to 0x00 and 0x00 to 0xFF)
    Also, we were not quite setting our flags correctly. CPU's basically only remember the flag for 1 instruction, until
    something else changes it. Then it's "gone forever" so to speak. We were not resetting our flags back based off other
    instructions (like if result wasn't zero, we didn't set the Z flag to OFF, etc..)
2. Incorrect CALL implementation
    CALL is like setting a bookmark. You place the NEXT instruction address onto the stack. Then you jump to the value
    at the immediate address (which will call a RET eventually to go back to your bookmark, as intended by the programmer)
3. WorkRam memory map bug
    We "split" work ram into 2 slots from 0xC000 to 0xCFFF and 0xD000 to 0xDFFF but still used a single array for this.
    The if statement containing the address between 0xD000 and 0xDFFF referred to the same spot as in 0xC000.
    We did address - 0xC000 in the xC000-xCFFF but also had address - 0xC000 in xD000-xDFFF. Meaning that they both
    referred to the same spot in workRam[]. This was overriding a few values needed at the 0xC800 address. Code was
    changed to address - 0xD000 so it now correctly refers to the correct spot (in read and writeByte)

Tomorrow we'll work on some other instruction tests to make sure they're working fully.
We'll do this for all instructions we've done so far till we feel confident that they are working properly.
After this we get the 256 prefix instructions implemented also.

June 12th:
All instructions seem correct up till when we get to the prefixed "xCB" set. We'll start implementing this now.
- rotate instructions [DONE]
- SLA/SRA (shift left/right arithmetic instructions) [DONE]
- SWAP instructions [DONE]
- SRL instructions [DONE]

There are 3 main instructions left for the whole 256 prefix opcode set:
1. BIT
2. RES
3. SET
They take up 4 rows each, but each instruction just has different params, so shouldn't be too time consuming to implement

- implement BIT instructions [DONE]
- implement RES instructions [DONE]
- implement SET instructions [DONE]


ALL INSTRUCTIONS IMPLEMENTED
Now we need to test

For tomorrow:
    Figure out what's wrong with our DAA instruction. We keep failing tests on there and the setting of the C flags
    seems to be the issue (i'm not sure why).

June 13th:
DAA solved
Test rom 1 PASS!!


June 14th:
Work on passing interrupts.
NOTE:
    I'm leaving solving the interrupts till a bit later on in development. The first issue was figuring out why my
    IF wasn't being set, but turns out that interrupt requests are done from outside sources (NOT the CPU). VBlank for
    example is when we enter Mode 1 in PPU. I'll restart working on interrupts when I've further developed more of the
    emulator.

Test 06 loads [DONE] PASS
Test 07, jr,jp,... [DONE] PASS
Test 03, op sp,hl  [in progress]